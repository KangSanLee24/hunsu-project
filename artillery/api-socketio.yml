config:
  # base url 정의 (우리는 domain을 작성)
  target: "http://localhost:3000/socket.io"
  phases:
    # 부하테스트 시간 (초)
    - duration: 60
    # 부하테스트 동안의 사용자 수 (초당 요청 수)
    # 목표 수치 2초 언더 / 사용자 수 300
      arrivalRate: 50
      # rampTo: 300
      name: socketio-api-request-test
  payload:
    path: "user.csv"
    fields:
      - "roomId"
      - "author"
      - "body"
    skipHeader: true  # CSV 파일의 첫 줄이 헤더인 경우 true로 설정
    loadAll: true
    name: "userData"
    
  engines:
    socketio: {} # Socket.IO 엔진 사용
  socketio:
    transports: ["websocket"] # WebSocket을 전송 수단으로 사용
# 부하 테스트 시나리오
scenarios:
  # 시나리오 정의
  - name: "Connect and join room"
    engine: "socketio"
    flow:
      - loop:
          - emit:
              channel: "chat" # chat이라는 channel로 보냄 event.gateway.ts
              data:
                roomId: "21"
                author: "박근균"
                body: "안녕하세요 1트"
          - think: 2  # 각 반복 사이에 충분한 대기 시간 추가
          - emit:
              channel: "chat"
              data:
                roomId: "21"
                author: "박근균"
                body: "안녕하세요 2트"
          - think: 2  # 각 반복 사이에 충분한 대기 시간 추가
          - emit:
              channel: "chat"
              data:
                roomId: "21"
                author: "박근균"
                body: "안녕하세요 3트"
          - think: 2  # 각 반복 사이에 충분한 대기 시간 추가
          - emit:
              channel: "chat"
              data:
                roomId: "21"
                author: "박근균"
                body: "안녕하세요 4트"
          - think: 2  # 각 반복 사이에 충분한 대기 시간 추가
          - emit:
              channel: "chat"
              data:
                roomId: "21"
                author: "박근균"
                body: "안녕하세요 5트"
          - think: 2  # 각 반복 사이에 충분한 대기 시간 추가
      - think: 11
    count: 10